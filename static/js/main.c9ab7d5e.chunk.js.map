{"version":3,"sources":["components/header.js","components/footer.js","components/home.js","components/cv.js","components/games.js","App.js","serviceWorker.js","index.js"],"names":["Burger","useState","display","setDisplay","width","setWidth","useLayoutEffect","updateWidth","window","innerWidth","addEventListener","removeEventListener","useWindowWidth","menuClass","buttonClass","className","onClick","MenuItems","mainClass","props","to","Header","Footer","Home","CVComponent","name","Education","Employment","CV","Games","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAiBA,SAASA,IAAW,IAAD,EAEaC,oBAAS,GAFtB,mBAEVC,EAFU,KAEDC,EAFC,KAGXC,EAhBR,WAA2B,IAAD,EACEH,mBAAS,GADX,mBACjBG,EADiB,KACVC,EADU,KAUxB,OARAC,2BAAgB,WACd,SAASC,IACPF,EAASG,OAAOC,YAIlB,OAFAD,OAAOE,iBAAiB,SAAUH,GAClCA,IACO,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACjD,IACIH,EAMOQ,GAEVC,EAAYX,GAAWE,GAAS,IAAM,YAAc,SACpDU,EAAcZ,EAAU,cAAgB,OAE5C,OACI,6BACA,yBAAKa,UAAWD,EAAaE,QAAS,WAAOb,GAAYD,KAAW,uBAAGa,UAAU,gBACjF,kBAACE,EAAD,CAAWC,UAAWL,KAK5B,SAASI,EAAWE,GAClB,OACE,yBAAKJ,UAAWI,EAAMD,WACpB,kBAAC,IAAD,CAAMH,UAAU,YAAYK,GAAG,OAA/B,MACA,kBAAC,IAAD,CAAML,UAAU,YAAYK,GAAG,UAA/B,UAqBSC,MAhBf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,2BACb,uBAAGA,UAAU,aAAY,kBAAC,IAAD,CAAMK,GAAG,KAAT,kBACzB,yBAAKL,UAAU,QACb,kBAACE,EAAD,CAAWC,UAAU,UACrB,kBAAClB,EAAD,WCvCGsB,MARf,WACE,OACE,yBAAKP,UAAU,oBACb,uBAAGA,UAAU,eAAb,+B,OCFSQ,MAHf,WACI,OAAO,yBAAKR,UAAU,c,MCC1B,SAASS,EAAaL,GAClB,OAAO,6BAAK,4BAAKA,EAAMM,OAG3B,SAASC,IACL,OAAO,kBAACF,EAAD,CAAaC,KAAK,cAG7B,SAASE,IACL,OAAO,kBAACH,EAAD,CAAaC,KAAK,eAYdG,MATf,WACI,OACI,yBAAKb,UAAU,YACX,kBAACW,EAAD,MACA,kBAACC,EAAD,Q,MCdGE,MAHf,WACI,OAAO,yBAAKd,UAAU,YAAW,qECmBtBe,MAXf,SAAaX,GACX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOY,OAAO,EAAMC,KAAK,IAAIC,UAAWV,IACxC,kBAAC,IAAD,CAAOS,KAAK,MAAMC,UAAWL,IAC7B,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,IAChC,kBAAC,EAAD,QCNcK,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9ab7d5e.chunk.js","sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\nfunction useWindowWidth() {\n  const [width, setWidth] = useState(0);\n  useLayoutEffect(() => {\n    function updateWidth() {\n      setWidth(window.innerWidth);\n    }\n    window.addEventListener('resize', updateWidth);\n    updateWidth();\n    return () => window.removeEventListener('resize', updateWidth);\n  }, []);\n  return width;\n}\n\nfunction Burger () {\n\n  const [display, setDisplay] = useState(false);\n  const width = useWindowWidth();\n\n  let menuClass = display && width <= 800 ? \"drop-down\" : \"hidden\"\n  let buttonClass = display ? \"icon active\" : \"icon\"\n\n  return (\n      <div>\n      <div className={buttonClass} onClick={() => {setDisplay(!display)}}><i className=\"fa fa-bars\"></i></div>\n      <MenuItems mainClass={menuClass}/>\n      </div>\n    );\n}\n\nfunction MenuItems (props) {\n  return (\n    <div className={props.mainClass}>\n      <Link className=\"menu-item\" to='/cv'>CV</Link>\n      <Link className=\"menu-item\" to='/games'>Games</Link>\n    </div>\n  );\n}\n\nfunction Header () {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"header container topnav\">\n          <p className=\"logo-text\"><Link to='/'>Debesh Mandal</Link></p>\n          <div className=\"menu\">\n            <MenuItems mainClass=\"items\"/>\n            <Burger />\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport '../App.css';\n\nfunction Footer () {\n  return (\n    <div className=\"footer container\">\n      <p className=\"footer-text\">debesh@debeshmandal.co.uk</p>\n    </div> \n  );\n};\n\nexport default Footer;","import React from 'react';\nfunction Home () {\n    return <div className='App-main'></div>\n};\nexport default Home;","import React from 'react';\nimport '../styles/cv.css';\n\nfunction CVComponent (props) {\n    return <div><h2>{props.name}</h2></div>\n}\n\nfunction Education () {\n    return <CVComponent name='Education' />\n}\n\nfunction Employment () {\n    return <CVComponent name='Employment' />\n}\n\nfunction CV () {\n    return (\n        <div className='App-main'>\n            <Education />\n            <Employment />\n        </div>\n    );\n};\n\nexport default CV;","import React from 'react';\nimport '../styles/games.css';\nfunction Games () {\n    return <div className='App-main'><p>To be confirmed - some fun and games</p></div>\n};\nexport default Games;","import React from 'react';\nimport Header from './components/header'\nimport Footer from './components/footer'\n\n\nimport { Route } from \"react-router-dom\";\n\nimport Home from './components/home';\nimport CV from './components/cv';\nimport Games from './components/games'\n\nfunction App(props) {\n  return ( \n    <div>\n      <Header />\n      <Route exact={true} path=\"/\" component={Home} />\n      <Route path=\"/cv\" component={CV} />\n      <Route path=\"/games\" component={Games} />\n      <Footer />\n    </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}